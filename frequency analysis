#include <stdio.h>
#include <stdlib.h>

// Swap two values in the array
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Partition the array around a pivot
int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

// Find the k-th smallest element in the array
int quickselect(int arr[], int low, int high, int k) {
    if (k > 0 && k <= high - low + 1) {
        int index = partition(arr, low, high);
        if (index - low == k - 1)
            return arr[index];
        if (index - low > k - 1)
            return quickselect(arr, low, index - 1, k);
        return quickselect(arr, index + 1, high, k - index + low - 1);
    }
    return INT_MAX;
}

int main() {
    int arr[] = {12, 3, 5, 7, 4, 19, 26};
    int n = sizeof(arr) / sizeof(arr[0]);
    int k = 4;
    printf("K'th smallest element is %d\n", quickselect(arr, 0, n - 1, k));
    return 0;
}
